c = document.getElementById('tdacanvas')
epsilon_ = document.getElementById('epsilon')
mode_select = document.getElementById('mode_select')

let interact_mode = "add"

let points = [] // 0-simplices, n-simplices generated by Cech complex.

let epsilon = 20

c.width = window.innerWidth
c.height = window.innerHeight

ctx = c.getContext("2d")

ctx.fill()

mode_select.oninput = function () {
    interact_mode = this.value
}

epsilon_.oninput = function () {
    epsilon = this.value / 50
    requestAnimationFrame(do_update)
}

let Chain = class Chain { // a chain is an element on the free abelian group on simplices
    constructor(simplices, signs) {
        this.simplices = simplices
        this.signs = signs
    }
}

let Point = class Point {
    constructor(x, y) {
        this.x = x
        this.y = y
    }

    boundary() {
        return null
    }

    d(x, y) {
        return Math.sqrt(Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2))
    }
}


let nSimplex = class nSimplex { // ordered list of points
    // 0-simplex is point, 1-simplex is line, 2-simplex triangle, etc.
    // so points should be n+1 points for the n-simplex
    constructor(points) {
        this.points = points
        this.n = points.length - 1
    }

    boundary() {
        let faces = []
        let signs = []
        for (let i = 0; i < this.n; n++) {
            faces.push(this.face(i))
            signs.push(i % 2 === 0 ? 1 : -1) // -1^i in the usual formula
        }
        return new Chain(
            faces,
            signs
        )
    }

    // getting the i-th face of an n-simplex is defined as deleting the i-th vertex/point
    face(i) {
        let face_points = [...this.points]
        face_points.splice(i, 1)
        return new nSimplex(face_points)
    }
}


window.addEventListener('click', function (event) {
    let x = event.x - c.offsetLeft;
    let y = event.y - c.offsetTop;

    if (x < 0 || x > c.width || y < 0 || y > c.height) {
        console.log('bad')
        return
    }
    if (interact_mode === "add") {
        console.log("added " + points.length + "-th point")
        // calc offsets
        let p = new Point(x, y)
        points.push(p)
    }
    if (interact_mode === "remove") {
        for (let i = 0; i < points.length; i++) {
            if (points[i].d(x, y) <= 5) {
                console.log('removed ' + i + '-th point')
                points.splice(i, 1);
                requestAnimationFrame(do_update)
                return
            }
        }
    }
    requestAnimationFrame(do_update)
})

function do_update(t) {
    //requestAnimationFrame(do_update)
    ctx.clearRect(0, 0, c.width, c.height)

    ctx.fillStyle = "rgb(220, 220, 220)"
    ctx.strokeStyle = "rgb(0, 0, 255)"
    for (const p of points) {
        ctx.beginPath()
        ctx.arc(p.x, p.y, epsilon, 0, 2 * Math.PI, false)
        ctx.fill()
    }
    for (const p of points) {
        ctx.beginPath()
        ctx.arc(p.x, p.y, epsilon, 0, 2 * Math.PI, false)
        ctx.stroke()
    }

    ctx.fillStyle = "rgb(0, 0, 0)"
    for (const p of points) {
        console.log('doing thing')
        ctx.beginPath()
        ctx.arc(p.x, p.y, 8, 0, 2 * Math.PI, false)
        ctx.fill()
    }


}

//setInterval(function () {requestAnimationFrame(do_update)}, 500)
requestAnimationFrame(do_update)
